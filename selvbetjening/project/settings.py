"""
Generated by 'django-admin startproject' using Django 2.2.18.
"""

import os
from distutils.util import strtobool
import django.conf.locale

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = os.environ['DJANGO_SECRET_KEY']
DEBUG = bool(strtobool(os.environ.get('DJANGO_DEBUG', 'False')))
ALLOWED_HOSTS = ['*']
TIME_ZONE = os.environ['DJANGO_TIMEZONE']
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Application definition

INSTALLED_APPS = [
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'selvbetjening',
    'sullissivik.login',
]

MIDDLEWARE = [
    'django_cookies_samesite.middleware.CookiesSameSite',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'sullissivik.login.middleware.LoginManager',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['POSTGRES_DB'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'HOST': os.environ['POSTGRES_HOST'],
    }
}

LANGUAGE_CODE = 'da-DK'

USE_I18N = True
USE_L10N = True
USE_TZ = True
LANGUAGE_COOKIE_NAME = 'Sullissivik.Portal.Lang'
LANGUAGE_COOKIE_DOMAIN = os.environ['DJANGO_LANGUAGE_COOKIE_DOMAIN']
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]
LOCALE_MAP = {
    'da': 'da-DK',
    'kl': 'kl-GL'
}

LANGUAGES = [
    ('da', ('Dansk')),
    ('kl', ('Kalaallisut')),
]

# Add custom languages not provided by Django
django.conf.locale.LANG_INFO['kl'] = {
    'bidi': False,
    'code': 'kl',
    'name': 'Greenlandic',
    'name_local': u'Kalaallisut',
}

SESSION_COOKIE_SAMESITE = 'strict'

STATIC_URL = '/static/'

UPLOAD_PATH = '/uploads'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'gunicorn': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['gunicorn'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['gunicorn'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

LOGOUT_REDIRECT = 'sullissivik:openid:login'  # url reverse name to redirect to when logged out
LOGIN_UNAUTH_REDIRECT = 'sullissivik:openid:login'  # url reverse name to redirect to when not logged in
LOGIN_DEFAULT_REDIRECT = 'selvbetjening:policyview'  # url reverse name to redirect to when logged in (unless another is explicitly specified in params)
LOGIN_REQUIREMENT_WHITELIST = ['/favicon.ico']

REST_HOST = 'http://kas:8000'
REST_TOKEN = os.environ['REST_TOKEN']

DEFAULT_CPR = os.environ.get('DEFAULT_CPR', None)

OPENID_CONNECT = {
    'enabled': bool(strtobool(os.environ.get('OPENID_ENABLED', 'False'))),
    'issuer': os.environ.get('OPENID_ISSUER'),
    'scope': os.environ.get('OPENID_SCOPE'),
    'client_id': os.environ.get('OPENID_CLIENT_ID'),
    'client_certificate': os.environ.get('OPENID_CLIENT_CERTIFICATE_FILE'),
    'private_key': os.environ.get('OPENID_PRIVATE_KEY_FILE'),
    'login_callback': os.environ.get('OPENID_LOGIN_CALLBACK'),  # This must be equal to fqdn + reverse('sullissivik:openid:login-callback')
    'front_channel_logout_uri': os.environ.get('OPENID_FRONT_CHANNEL_LOGOUT_URI'),  # This must be equal to fqdn + reverse('sullissivik:openid:logout-callback')
    'logout_uri': os.environ.get('OPENID_LOGOUT_URI'),
    'post_logout_redirect_uri': os.environ.get('OPENID_POST_LOGOUT_REDIRECT_URI'),
}

NEMID_CONNECT = {
    'enabled': False,
    'federation_service': '""',
    'cookie_name': '""',
    'cookie_path': '""',
    'cookie_domain': '""',
    'login_url': '""',
    'redirect_field': '""',
    'client_certificate': '""',
    'private_key': '""',
    'get_user_service': '""',
}
