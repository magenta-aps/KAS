stages:
  - lint
  - build
  - test
  - release
  - deploy

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/kas

  KAS_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/kas:${CI_COMMIT_SHA}
  KAS_IMAGE_DEV: ${CI_REGISTRY_IMAGE}/kas:dev
  KAS_IMAGE_TAG: magentaaps/kas:${CI_COMMIT_TAG}-kas

  SELF_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/self:${CI_COMMIT_SHA}
  SELF_IMAGE_DEV: ${CI_REGISTRY_IMAGE}/self:dev
  SELF_IMAGE_TAG: magentaaps/kas:${CI_COMMIT_TAG}-self


# Lint stage
#############
.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.8
  tags:
    - docker

Lint Python:
  <<: *lint-default
  before_script:
    - pip3 install flake8
    #- pip3 install -r django/requirements.txt
  script:
    - flake8 --ignore E501,E226 kas/
    - flake8 --ignore E501,E226 selvbetjening/

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

# Build stage
#############

Build kas image:
  stage: build
  needs: []
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - docker
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.kas
      --destination=${KAS_IMAGE_SHA}

Build selvbetjenings image:
  stage: build
  needs: []
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - docker
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.selvbetjening
      --destination=${SELF_IMAGE_SHA}

# Test stage
############
.test-default: &test-default
  stage: test
  dependencies: []
  tags:
    - docker

KAS Unittest:
  <<: *test-default
  needs: ["Build kas image"]
  image: ${KAS_IMAGE_SHA}
  services:
   - name: postgres:13
     alias: kas-db
  variables:
    DJANGO_SECRET_KEY: e$s6@0(hs5ja79-&!l7vt^onoe4h^*bv_e4hj&wt5^8*&x76-$
    DJANGO_TIMEZONE: Europe/Copenhagen
    DJANGO_ADMIN_GROUP: admins
    POSTGRES_USER: kas
    POSTGRES_PASSWORD: kas
    POSTGRES_DB: kas
    POSTGRES_HOST: kas-db
    REST_HOST: http://kas:8000
    REST_TOKEN: 1799c88d-10e6-489d-8fe9-adeb2fd8a36f
    EBOKS_DISPATCH_BULK_SIZE: 100
    EBOKS_CLIENT_CERTIFICATES: ""
    EBOKS_CLIENT_PRIVATE_KEY: ""
    EBOKS_VERIFY: ""
    EBOKS_CLIENT_ID: ""
    EBOKS_SYSTEM_ID: ""
    EBOKS_HOST: ""
    EBOKS_CONTENT_TYPE_ID: ""
    # No access to the eskat database, so give it dummy environment variables
    ESKAT_HOST: ""
    ESKAT_PORT: ""
    ESKAT_DB: ""
    ESKAT_USER: ""
    ESKAT_PASSWORD: ""

    # No fiddling with sftp server during testing
    TENQ_HOST: ""
    TENQ_PORT: 22
    TENQ_USER: ""
    TENQ_PASSWORD: ""
    TENQ_KNOWN_HOSTS: ""
    # Simulate development environment while running tests so we use mockup data
    ENVIRONMENT: development
  script:
    - cd /app && python manage.py test

Selvbetjening Unittest:
  <<: *test-default
  needs: ["Build selvbetjenings image"]
  image: ${SELF_IMAGE_SHA}
  services:
    - name: postgres:13
      alias: kas-db
  variables:
    DJANGO_SECRET_KEY: e$s6@0(hs5ja79-&!l7vt^onoe4h^*bv_e4hj&wt5^8*&x76-$
    DJANGO_TIMEZONE: Europe/Copenhagen
    POSTGRES_USER: kas
    POSTGRES_PASSWORD: kas
    POSTGRES_DB: selvbetjening
    POSTGRES_HOST: kas-db
    DJANGO_LANGUAGE_COOKIE_DOMAIN: localhost
    REST_HOST: http://kas:8000
    REST_TOKEN: 1799c88d-10e6-489d-8fe9-adeb2fd8a36f
    OPENID_ENABLED: "false"
    OPENID_ISSUER: ""
    OPENID_SCOPE: ""
    OPENID_CLIENT_ID: ""
    OPENID_CLIENT_CERTIFICATE_FILE: ""
    OPENID_PRIVATE_KEY_FILE: ""
    OPENID_LOGOUT_URI: ""
    OPENID_LOGIN_CALLBACK: ""
    OPENID_FRONT_CHANNEL_LOGOUT_URI: ""
    OPENID_POST_LOGOUT_REDIRECT_URI: ""
    CLOSE_AT_MONTH: 5
    CLOSE_AT_DATE: 6
  script:
    - cd /app && python manage.py test

# Release stage
###############

.release-kas: &release-kas
  stage: release
  image: alpine
  needs: ["KAS Unittest"]
  variables:
    GIT_STRATEGY: none # We do not need the source code
  dependencies: []
  tags:
    - docker
  before_script:
    # install skopeo
    - apk add skopeo

.release-self: &release-self
  <<: *release-kas
  needs: ["Selvbetjening Unittest"]

Release kas dev image:
  <<: *release-kas
  only:
    refs:
      - master
      - development
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      "docker://${KAS_IMAGE_SHA}"
      "docker://${KAS_IMAGE_DEV}"

Release selvbetjenings dev image:
  <<: *release-self
  only:
    refs:
      - master
      - development
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      "docker://${SELF_IMAGE_SHA}"
      "docker://${SELF_IMAGE_DEV}"

Release kas production image:
  <<: *release-kas
  only:
    variables:
      # Matches all of SemVer 2.0.0
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${KAS_IMAGE_SHA}"
      "docker://${KAS_IMAGE_TAG}"

Release selvbetjening production image:
  <<: *release-self
  only:
    variables:
      # Matches all of SemVer 2.0.0
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${SELF_IMAGE_SHA}"
      "docker://${SELF_IMAGE_TAG}"

# Deploy stage
##############

.deploy-default: &deploy-default
  stage: deploy
  image: magentalabs/pepper:latest
  services: []
  dependencies: []
  tags:
    - deploy


Deploy test:
  # Automatic deployment of branch master to test
  <<: *deploy-default
  needs: ["Release kas dev image", "Release selvbetjenings dev image"]
  only:
    refs:
      - master
      - development
  when: manual
  variables:
    DEPLOYMENT_NAMESPACE: kas.service-test
    SALTAPI_URL: https://ctrldev1.magenta-aps.dk/api/
    SALTAPI_EAUTH: file
    GIT_STRATEGY: none
  script:
    - echo Attempting to call deployment
    - pepper --client runner --fail-any state.orchestrate ${DEPLOYMENT_NAMESPACE}
  environment:
    name: test
    url: ""

Deploy prod:
  # Automatic deployment of branch master to test
  <<: *deploy-default
  needs: ["Release kas production image", "Release selvbetjening production image"]
  only:
    variables:
      # Matches all of SemVer 2.0.0
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  when: manual
  variables:
    DEPLOYMENT_NAMESPACE: kas.service-prod
    SALTAPI_URL: https://ctrl1.magenta-aps.dk/api/
    SALTAPI_EAUTH: file
    GIT_STRATEGY: none
  script:
    - echo Attempting to call deployment
    - pepper --client runner --fail-any state.orchestrate ${DEPLOYMENT_NAMESPACE}
  environment:
    name: production
    url: ""
