stages:
  - lint
  - build
  - test
  - release
  - configure
  - deploy

include:
  - project: 'labs/salt-automation'
    file:
      - '/gitlab-ci-templates/common/rules.v1.yml'
      - '/gitlab-ci-templates/common/saltbert.v1.yml'
      - '/gitlab-ci-templates/common/config-updater-meta.v1.yml'

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/kas

  KAS_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/kas:${CI_COMMIT_SHA}
  KAS_IMAGE_DEV: magentaaps/kas:dev-kas
  KAS_IMAGE_TAG: magentaaps/kas:${CI_COMMIT_TAG}-kas

  SELF_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/self:${CI_COMMIT_SHA}
  SELF_IMAGE_DEV: magentaaps/kas:dev-self
  SELF_IMAGE_TAG: magentaaps/kas:${CI_COMMIT_TAG}-self

  ER_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/er:${CI_COMMIT_SHA}
  ER_IMAGE_DEV: magentaaps/kas:dev-er
  ER_IMAGE_TAG: magentaaps/kas:${CI_COMMIT_TAG}-er

  VERSION: PIPELINE


# Lint stage
#############
.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.8
  tags:
    - docker

Lint Python:
  <<: *lint-default
  before_script:
    - pip3 install flake8
    - pip3 install black
    #- pip3 install -r django/requirements.txt
  script:
    - flake8 --extend-ignore E501,E226,E203 kas/
    - flake8 --extend-ignore E501,E226,E203 selvbetjening/
    - black --check --diff --exclude=migrations kas/
    - black --check --diff --exclude=migrations selvbetjening/

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

Lint REUSE compliance:
  extends: .lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

# Build stage
#############

Build KAS image:
  stage: build
  needs: ["Lint Python", "Lint Dockerfiles", "Lint REUSE compliance"]
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - docker
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.kas
      --destination=${KAS_IMAGE_SHA}

Build Selvbetjening image:
  stage: build
  needs: ["Lint Python", "Lint Dockerfiles", "Lint REUSE compliance"]
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - docker
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.selvbetjening
      --destination=${SELF_IMAGE_SHA}

Build ER image:
  stage: build
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - docker
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.er
      --destination=${ER_IMAGE_SHA}


# Test stage
############
.test-default: &test-default
  stage: test
  dependencies: []
  tags:
    - docker

KAS Unittest:
  <<: *test-default
  needs: ["Build KAS image"]
  image: ${KAS_IMAGE_SHA}
  script:
    - export KAS_IMAGE_SHA=${KAS_IMAGE_SHA}
    - docker-compose up

  # services:
  #  - name: postgres:13
  #    alias: kas-db
  # variables:
  #   DJANGO_SECRET_KEY: e$s6@0(hs5ja79-&!l7vt^onoe4h^*bv_e4hj&wt5^8*&x76-$
  #   DJANGO_TIMEZONE: Europe/Copenhagen
  #   DJANGO_ADMIN_GROUP: admins
  #   POSTGRES_USER: kas
  #   POSTGRES_PASSWORD: kas
  #   POSTGRES_DB: kas
  #   POSTGRES_HOST: kas-db
  #   REST_HOST: http://kas:8000
  #   REST_TOKEN: 1799c88d-10e6-489d-8fe9-adeb2fd8a36f
  #   SELVBETJENING_REPRESENTATION_START: http://kas-selvbetjening:8080/represent-start/
  #   SELVBETJENING_REPRESENTATION_STOP: http://kas-selvbetjening:8000/represent-stop/
  #   SELVBETJENING_REPRESENTATION_TOKEN_MAX_AGE: 60
  #   EBOKS_DISPATCH_BULK_SIZE: 100
  #   EBOKS_MOCK: 'True'
  #   # No access to the eskat database, so give it dummy environment variables
  #   ESKAT_HOST: ""
  #   ESKAT_PORT: ""
  #   ESKAT_DB: ""
  #   ESKAT_USER: ""
  #   ESKAT_PASSWORD: ""
  #   GENERATE_DB_DOCUMENTATION: "false"

  #   # No fiddling with sftp server during testing
  #   TENQ_HOST: ""
  #   TENQ_PORT: 22
  #   TENQ_USER: ""
  #   TENQ_PASSWORD: ""
  #   TENQ_KNOWN_HOSTS: ""
  #   TENQ_PROJECT_ID: "KAS"
  #   # Simulate development environment while running tests so we use mockup data
  #   ENVIRONMENT: development
  #   DISABLE_METRICS: 'True'
  # script:
  #   - cd /app
  #   - coverage run --source='.' --omit=manage.py,project/wsgi.py,*/admin.py manage.py test
  #   - coverage report
  #   - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
          coverage_format: cobertura
          path: /app/coverage.xml

Selvbetjening Unittest:
  <<: *test-default
  needs: ["Build Selvbetjening image"]
  image: ${SELF_IMAGE_SHA}
  services:
    - name: postgres:13
      alias: kas-db
  variables:
    DJANGO_SECRET_KEY: e$s6@0(hs5ja79-&!l7vt^onoe4h^*bv_e4hj&wt5^8*&x76-$
    DJANGO_TIMEZONE: Europe/Copenhagen
    POSTGRES_USER: kas
    POSTGRES_PASSWORD: kas
    POSTGRES_DB: selvbetjening
    POSTGRES_HOST: kas-db
    DJANGO_LANGUAGE_COOKIE_DOMAIN: localhost
    REST_HOST: http://kas:8000
    REST_TOKEN: 1799c88d-10e6-489d-8fe9-adeb2fd8a36f
    KAS_REPRESENTATION_STOP: http://kas:8000/represent-stop
    OPENID_ENABLED: "false"
    OPENID_ISSUER: ""
    OPENID_SCOPE: ""
    OPENID_CLIENT_ID: ""
    OPENID_CLIENT_CERTIFICATE_FILE: ""
    OPENID_PRIVATE_KEY_FILE: ""
    OPENID_LOGOUT_URI: ""
    OPENID_LOGIN_CALLBACK: ""
    OPENID_FRONT_CHANNEL_LOGOUT_URI: ""
    OPENID_POST_LOGOUT_REDIRECT_URI: ""
    CLOSE_AT_MONTH: 5
    CLOSE_AT_DATE: 6
    SAML_ENABLED: "true"
    SAML_SP_ENTITY_ID: http://localhost:8040/saml/metadata/
    SAML_SP_LOGIN_CALLBACK_URI: http://localhost:8040/login/callback
    SAML_SP_LOGOUT_CALLBACK_URI: http://localhost:8040/logout/callback/
    SAML_SP_CERTIFICATE: /ssl/sp/selfsigned.crt
    SAML_SP_KEY: /ssl/sp/selfsigned.key
    SAML_IDP_ENTITY_ID: http://localhost:8080/simplesaml/saml2/idp/metadata.php
    SAML_IDP_LOGIN_URI: http://localhost:8080/simplesaml/saml2/idp/SSOService.php
    SAML_IDP_LOGOUT_URI: http://localhost:8080/simplesaml/saml2/idp/SingleLogoutService.php
    SAML_IDP_CERTIFICATE: /ssl/idp/selfsigned.crt
    SAML_IDP_METADATA: http://localhost:8080/simplesaml/saml2/idp/metadata.php
    SAML_CONTACT_TECHNICAL_NAME: Tester
    SAML_CONTACT_TECHNICAL_EMAIL: test@example.com
    SAML_CONTACT_SUPPORT_NAME: Tester
    SAML_CONTACT_SUPPORT_EMAIL: test@example.com
    SKIP_IDP_METADATA: "true"
  script:
    - cd /app
    - coverage run --source='.' --omit=manage.py,project/wsgi.py,*/admin.py manage.py test
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
          coverage_format: cobertura
          path: /app/coverage.xml

# Release stage
###############

.release-kas:
  stage: release
  image: alpine
  needs: ["KAS Unittest"]
  variables:
    GIT_STRATEGY: none # We do not need the source code
  dependencies: []
  tags:
    - docker
  before_script:
    # install skopeo
    - apk add skopeo

.release-self: &release-self
  extends:
    - .release-kas
  needs: ["Selvbetjening Unittest"]


Release KAS image:
  # Releases both stable and RC releases.
  extends:
    - .rules:semver-all
    - .release-kas
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${KAS_IMAGE_SHA}"
      "docker://${KAS_IMAGE_TAG}"

Release Selvbetjening image:
  extends:
    - .rules:semver-all
    - .release-self
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${SELF_IMAGE_SHA}"
      "docker://${SELF_IMAGE_TAG}"

Release ER image:
  extends:
    - .rules:semver-all
    - .release-kas
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${ER_IMAGE_SHA}"
      "docker://${ER_IMAGE_TAG}"

# Configure stage
#################

Configure Test:
  stage: configure
  extends:
    - .rules:semver-all
    - .config:endpoint-with-tag
  needs: ["Release KAS image", "Release Selvbetjening image"]
  variables:
    # Matches routing in config-updater/config_updater/kas/main.py in salt repo
    ENDPOINT: kas/salt/update-test

Configure Production:
  stage: configure
  extends:
    - .rules:semver-core
    - .config:endpoint-with-tag
  needs: ["Release KAS image", "Release Selvbetjening image"]
  variables:
    # Matches routing in config-updater/config_updater/kas/main.py in salt repo
    ENDPOINT: kas/salt/update-production

# Deploy stage
##############

Deploy to Staging:
  stage: deploy
  extends:
    - .rules:semver-all
    - .saltbert
  needs: ["Release KAS image", "Release Selvbetjening image", "Release ER image", "Configure Test"]
  variables:
    SALTBERT_ORCHESTRATION: kas.service-test
    SALTBERT_URL: https://ctrldev1.magenta-aps.dk
  when: manual
  environment:
    name: test
    url: "https://test.kas.aka.nanoq.gl"

Deploy to Production:
  stage: deploy
  extends:
    - .rules:semver-core
    - .saltbert
  needs: ["Release KAS image", "Release Selvbetjening image", "Configure Production"]
  variables:
    SALTBERT_ORCHESTRATION: kas.service-prod
    SALTBERT_URL: https://ctrl1.magenta-aps.dk
  when: manual
  environment:
    name: production
    url: "https://kas.aka.nanoq.gl"
