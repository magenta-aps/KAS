# =============================================================================
# gitlab.ci.yml
# =============================================================================
KAS Unittest:
  <<: *test-default
  needs: ["Build KAS image"]
  image: ${KAS_IMAGE_SHA}
  services:
   - name: postgres:13
     alias: kas-db
  variables:
    DJANGO_SECRET_KEY: e$s6@0(hs5ja79-&!l7vt^onoe4h^*bv_e4hj&wt5^8*&x76-$
    DJANGO_TIMEZONE: Europe/Copenhagen
    DJANGO_ADMIN_GROUP: admins
    POSTGRES_USER: kas
    POSTGRES_PASSWORD: kas
    POSTGRES_DB: kas
    POSTGRES_HOST: kas-db
    REST_HOST: http://kas:8000
    REST_TOKEN: 1799c88d-10e6-489d-8fe9-adeb2fd8a36f
    SELVBETJENING_REPRESENTATION_START: http://kas-selvbetjening:8080/represent-start/
    SELVBETJENING_REPRESENTATION_STOP: http://kas-selvbetjening:8000/represent-stop/
    SELVBETJENING_REPRESENTATION_TOKEN_MAX_AGE: 60
    EBOKS_DISPATCH_BULK_SIZE: 100
    EBOKS_MOCK: 'True'
    # No access to the eskat database, so give it dummy environment variables
    ESKAT_HOST: ""
    ESKAT_PORT: ""
    ESKAT_DB: ""
    ESKAT_USER: ""
    ESKAT_PASSWORD: ""
    GENERATE_DB_DOCUMENTATION: "false"

    # No fiddling with sftp server during testing
    TENQ_HOST: ""
    TENQ_PORT: 22
    TENQ_USER: ""
    TENQ_PASSWORD: ""
    TENQ_KNOWN_HOSTS: ""
    TENQ_PROJECT_ID: "KAS"
    # Simulate development environment while running tests so we use mockup data
    ENVIRONMENT: development
    DISABLE_METRICS: 'True'
  script:
    - cd /app
    - coverage run --source='.' --omit=manage.py,project/wsgi.py,*/admin.py manage.py test
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
          coverage_format: cobertura
          path: /app/coverage.xml

# =============================================================================
# docker-compose
# =============================================================================
services:
  kas-web:
    user: "1000:1000"  # Override in docker-compose.override.yml if your local user is different
    container_name: kas
    image: kas:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.kas
    depends_on:
      - postgres
    # Test-idp needs for adresses to endpoints to be the same from the perspective
    # of the test-idp container and for the client (which means accessing 'localhost' adresses always)
    # This means that all containers should run in "host" network mode, and should conflict
    # with each others' ports
    network_mode: "host"
    env_file:
      - ./dev-environment/kas.env
    volumes:
      - ./kas/:/app
      - ./data/kas:/srv/media
      - ./data/er/er_html:/app/kas/static/doc/er_html:ro
    environment:
      - MAKE_MIGRATIONS=true
      - MIGRATE=true
      # Set this to "DUMMYDATA=" in override file if you do not want dummy data
      - DUMMYDATA=true
      - CREATE_USERS=true
      - CREATE_DUMMY_USERS=true
      - TEST=true
    command: gunicorn -b 0.0.0.0:8000 project.wsgi:application --reload -w 1 --access-logfile - --error-logfile - --capture-output # reload on code changes

# =============================================================================
# salt/states/magenta/kas/templates/docker-compose.yml.j2
# =============================================================================
services:
  web:
    container_name: kas-web-1 #django dosent allow _ in hostnames
    image: {{ kas_docker_image }}
    depends_on:
      - database
    ports:
      - "0.0.0.0:443:443"
    env_file:
      - ./config/kas.env
    networks:
      - default
      - prometheus_lan
    environment:
      - MIGRATE=true
    {%- if create_users is sameas True %}
      - CREATE_USERS=true
    {%- endif %}
    {%- if create_dummy_users is sameas True %}
      - CREATE_DUMMY_USERS=true
    {% endif %}
    {%- if create_dummy_data is sameas True %}
      - DUMMYDATA=true
    {%- endif %}
    volumes:
      - {{ ssl_dir }}:/ssl/
      - /opt/docker/kas/data/kas:/srv/media
      - /opt/docker/kas/data/er/er_html:/app/kas/static/doc/er_html
    restart: unless-stopped
    command: gunicorn -b 0.0.0.0:443 project.wsgi:application -w 4 --error-logfile - --access-logfile - --capture-output --certfile=/ssl/kas+ressourcerenter.cert --keyfile=/ssl/kas+ressourcerenter.key --timeout 120

